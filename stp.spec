%define _enable_debug_packages %{nil}
%define debug_package %{nil}

Summary:	Constraint solver used by program analysis tools
Name:		stp
Version:	0.1392
Release:	3
License:	MIT and BSD
Group:		Development/Other
Url:		https://sites.google.com/site/stpfastprover/
# (using revision 1392)
# svn https://stp-fast-prover.svn.sourceforge.net/svnroot/stp-fast-prover/trunk/stp stp
# find stp -name .svn | xargs rm -rf
# tar jcf stp.tar.bz2 stp
Source0:	stp.tar.bz2
Patch0:		stp-version.patch
BuildRequires:	bison
BuildRequires:	flex
BuildRequires:	subversion
BuildRequires:	valgrind
BuildRequires:	pkgconfig(zlib)

%description
STP is a constraint solver (also referred to as a decision procedure or
automated prover) aimed at solving constraints generated by program analysis
tools, theorem provers, automated bug finders, biology, cryptography,
intelligent fuzzers and model checkers. STP has been used in many research
projects at Stanford, Berkeley, MIT, CMU and other universities. It is also
being used at many companies such as NVIDIA, some startup companies, and
by certain government agencies.

The input to STP are formulas over the theory of bit-vectors and arrays
(This theory captures most expressions from languages like C/C++/Java and
Verilog), and the output of STP is a single bit of information that
indicates whether the formula is satisfiable or not. If the input is
satisfiable, then it also generates a variable assignment to satisfy the
input formula.

%files
%doc %{_docdir}/%{name}
%{_bindir}/*

#----------------------------------------------------------------------------

%package devel
Summary:	Development files for STP
Group:		Development/Other
Conflicts:	%{name} < 0.1392-2
Requires:	%{name} = %{EVRD}

%description devel
Development files for STP.

%files devel
%{_includedir}/*
%{_libdir}/*.a

#----------------------------------------------------------------------------

%prep
%setup -q -n %{name}
%patch0 -p1
perl -pi -e "s|(TEST_PREFIX=).*|\$1tests/|;" scripts/Makefile.common
perl -pi -e "s|__PACKAGE_VERSION__|%{version}|;" src/main/Makefile

%build
. scripts/configure --with-prefix=%{_prefix} --with-fpic
%make

%install
make install PREFIX=%{buildroot}%{_prefix} LIB_DIR=%{buildroot}%{_libdir}
mkdir -p %{buildroot}%{_docdir}/%{name}
install -m644 AUTHORS CODING_GUIDLINES DOWNLOAD LICENSE \
	LICENSE_COMPONENTS README %{buildroot}%{_docdir}/%{name}

%check
PATH=$PWD/bin:$PATH make regressall
install -m644 *.log %{buildroot}%{_docdir}/%{name}

